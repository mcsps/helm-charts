{{- $insecure := ternary "--insecure" "" .Values.insecure }}
{{- $http_proxy := ternary (printf "-x %s" .Values.httpProxy.address) "" .Values.httpProxy.enabled }}
apiVersion: v1
data:
  create.sh: |
    echo "Creating cluster $CLUSTERNAME"
    curl {{ $insecure }} {{ $http_proxy }} \
        --retry 5 --retry-delay 5 \
        -sfL \
        --request POST \
        -o /dev/null \
        --url "$RANCHERURL/v1/provisioning.cattle.io.clusters" \
        -u "$APITOKEN" \
        --header 'Content-Type: application/json' \
        --data '{
            "type":"provisioning.cattle.io.cluster",
            "metadata":{
                "namespace":"fleet-default",
                "name":"'"$CLUSTERNAME"'"
            },
            "spec":{
                {{ if .Values.httpProxy.enabled }}
                "agentEnvVars":[
                    {
                        "name":"HTTP_PROXY",
                        "value":"{{ .Values.httpProxy.address }}"
                    },
                    {
                        "name":"HTTPS_PROXY",
                        "value":"{{ .Values.httpProxy.address }}"
                    },
                    {
                        "name":"NO_PROXY",
                        "value":"127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.svc,.cluster.local"
                    }
                ],
                {{ end }}
                "clusterAgentDeploymentCustomization":{
                    "overrideResourceRequirements":{
                        "limits":{
                            "cpu":"2000m",
                            "memory":"2Gi"
                        },
                        "requests":{
                            "cpu":"200m",
                            "memory":"256Mi"
                        }
                    }
                },
                "fleetAgentDeploymentCustomization":{
                    "overrideResourceRequirements":{
                        "limits":{
                            "cpu":"2000m",
                            "memory":"2Gi"
                        },
                        "requests":{
                            "cpu":"100m",
                            "memory":"128Mi"
                        }
                    }
                }
            }
        }' || { echo "Could not create cluster $CLUSTERNAME"; exit 1; }
    echo "Created cluster $CLUSTERNAME"

    echo "Getting cluster ID for $CLUSTERNAME"
    while :
    do
        CLUSTER_ID="$(curl {{ $insecure }} {{ $http_proxy }} \
            --retry 5 --retry-delay 5 \
            -sfL \
            --request GET \
            --url "$RANCHERURL/v3/clusters?name=$CLUSTERNAME" \
            -u "$APITOKEN" | jq -r '.data[0].id')"
        if [[ "$CLUSTER_ID" != 'null' ]] && [[ -n "$CLUSTER_ID" ]]; then
            break
        elif [[ "$i" == '20' ]]; then
            echo "Could not get cluster ID for $CLUSTERNAME"
            exit 1
        fi
        sleep 5
    done
    echo "Got cluster ID for $CLUSTERNAME"

    echo "Getting cluster registration token for $CLUSTERNAME ($CLUSTER_ID)"
    while :
    do
        AGENTURL="$(curl {{ $insecure }} {{ $http_proxy }} \
            --retry 5 --retry-delay 5 \
            -sfL \
            --request GET \
            --url "$RANCHERURL/v3/clusterregistrationtokens?clusterId=$CLUSTER_ID" \
            -u "$APITOKEN" | jq -r '.data[0].manifestUrl')"
        if [[ "$AGENTURL" != 'null' ]] && [[ -n "$AGENTURL" ]]; then
            break
        elif [[ "$i" == '20' ]]; then
            echo "Could not get cluster registration token for $CLUSTERNAME ($CLUSTER_ID)"
            exit 1
        fi
        sleep 5
    done
    echo "Got cluster registration token for $CLUSTERNAME ($CLUSTER_ID)"

    echo "Waiting for Vcluster pod to become ready"
    # waiting for Vcluster pod multiple times since the pod might not have been created by the statefulset yet
    while :
    do
        kubectl -n $TARGETNAMESPACE wait pod/$CLUSTERNAME-vcluster-0 --for=condition=ready --timeout=10s && break || [[ "$i" != '20' ]] || { echo "Failed waiting for VCLUSTER pod to get ready"; exit 1; }
        sleep 5
    done
    echo "Vcluster pod ready"

    echo "Fetching Rancher manifest from upstream"
    RANCHER_MANIFEST="$(curl {{ $insecure }} {{ $http_proxy }} \
            -sfL \
            --request GET \
            --url "$AGENTURL")" || { echo "Could not fetch Rancher manifest from upstream"; exit 1; }
    echo "Fetched Rancher manifest from upstream"

    echo "Copying kubectl CLI to Vcluster pod"
    kubectl -n $TARGETNAMESPACE cp /usr/local/bin/kubectl $CLUSTERNAME-vcluster-0:/tmp/kubectl -c syncer || { echo "Could not copy kubectl to vcluster pod"; exit 1; }
    echo "Copied kubectl CLI to Vcluster pod"

    echo "Creating cattle-system namespace in Vcluster"
    kubectl -n $TARGETNAMESPACE exec $CLUSTERNAME-vcluster-0 -c syncer -- /tmp/kubectl --kubeconfig=/data/k3s-config/kube-config.yaml create ns cattle-system || { echo "Could not create cattle-system NS in Vcluster"; exit 1; }
    echo "Created cattle-system namespace in Vcluster"

    echo "Applying Rancher manifest to Vcluster"
    echo "$RANCHER_MANIFEST" | kubectl -n $TARGETNAMESPACE exec --stdin $CLUSTERNAME-vcluster-0 -c syncer -- /tmp/kubectl --kubeconfig=/data/k3s-config/kube-config.yaml apply -f - || { echo "Could not apply Rancher manifest to Vcluster"; exit 1; }
    echo "Applied Rancher manifest to Vcluster"

    echo "Removing kubectl CLI from Vcluster pod"
    kubectl -n $TARGETNAMESPACE exec $CLUSTERNAME-vcluster-0 -c syncer -- rm /tmp/kubectl || { echo "Could not delete kubectl from vcluster pod"; exit 1; }
    echo "Removed kubectl CLI from Vcluster pod"

    echo "Successfully set up Vcluster as Rancher cluster"
  delete.sh: |
    echo "Removing cluster $CLUSTERNAME"

    echo "Getting cluster ID for $CLUSTERNAME"
    while :
    do
        CLUSTER_ID="$(curl {{ $insecure }} {{ $http_proxy }} \
            --retry 5 --retry-delay 5 \
            -sfL \
            --request GET \
            --url "$RANCHERURL/v3/clusters?name=$CLUSTERNAME" \
            -u "$APITOKEN" | jq -r '.data[0].id')"
        if [[ "$CLUSTER_ID" != 'null' ]] && [[ -n "$CLUSTER_ID" ]]; then
            break
        elif [[ "$i" == '20' ]]; then
            echo "Could not get cluster ID for $CLUSTERNAME"
            exit 1
        fi
        sleep 5
    done
    echo "Got cluster ID ($CLUSTER_ID) for $CLUSTERNAME"

    echo "Removing cluster with ID $CLUSTER_ID"
    while :
    do
        RESULT="$(curl {{ $insecure }} {{ $http_proxy }} \
            --retry 5 --retry-delay 5 \
            -sfL \
            --request DELETE \
            --url "$RANCHERURL/v3/clusters/${CLUSTER_ID}" \
            -u "$APITOKEN" | jq -r '.state')"
        if [[ "$RESULT" != 'null' ]] && [[ -n "$RESULT" ]]; then
            break
        elif [[ "$i" == '20' ]]; then
            echo "Could not remove cluster with ID $CLUSTER_ID"
            exit 1
        fi
        sleep 5
    done
    echo "Removed cluster with ID $CLUSTER_ID (Result: $RESULT)"

    echo "Successfully removed cluster $CLUSTERNAME"
kind: ConfigMap
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
